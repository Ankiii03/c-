#include <iostream>
#include <fstream>
#include <cstdlib>  // For rand() and srand()
#include <ctime>    // For time()

// Complex class definition
class Complex {
private:
    double real;
    double imag;

public:
    Complex() : real(0.0), imag(0.0) {}
    Complex(double r, double i) : real(r), imag(i) {}

    // Overloaded operators for complex number arithmetic
    Complex operator+(const Complex& other) const {
        return Complex(real + other.real, imag + other.imag);
    }
    Complex operator-(const Complex& other) const {
        return Complex(real - other.real, imag - other.imag);
    }

    Complex operator*(const Complex& other) const {
        return Complex((real * other.real) - (imag * other.imag),
                       (real * other.imag) + (imag * other.real));
    }

    Complex operator/(const Complex& other) const {
        double denominator = other.real * other.real + other.imag * other.imag;
        if (denominator == 0) {
std::cerr << "Error: Division by zero." << std::endl;
            exit(EXIT_FAILURE);
        }
        return Complex(((real * other.real) + (imag * other.imag)) / denominator,
                       ((imag * other.real) - (real * other.imag)) / denominator);
    }




              
    // Function to display the complex number
    friend std::ostream& operator<<(std::ostream& os, const Complex& c);
};
std::ostream& operator<<(std::ostream& os, const Complex& c) {
    os << "(" << c.real << " + " << c.imag << "i)";
    return os;
}
int main() {
    // Seed the random number generator
    srand(static_cast<unsigned>(time(nullptr)));
    // Generate random complex numbers and operators
    const int numPairs = 5;
    Complex numbers[numPairs][2];
    char operators[numPairs] = {'+', '-', '*', '/'};
    // Open file for writing
    std::ofstream outputFile("complex_numbers.txt");

    if (!outputFile.is_open()) {
        std::cerr << "Error: Unable to open file for writing." << std::endl;
        return EXIT_FAILURE;
    }

    // Generate random complex numbers and operators, write to file
    for (int i = 0; i < numPairs; ++i) {
        numbers[i][0] = Complex(rand() % 10, rand() % 10);
        numbers[i][1] = Complex(rand() % 10, rand() % 10);
        char op = operators[rand() % 4];
        // Write complex numbers and operator to the file
        outputFile << numbers[i][0] << " " << op << " " << numbers[i][1] << std::endl;
    }

    // Close the file
    outputFile.close();
std::cout << "Complex numbers and operators written to file 'complex_numbers.txt'." << std::endl;

    return 0;
}
